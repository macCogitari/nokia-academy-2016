

STL notes

kontenery:

array
vector
deque // double ended queue
list
forward_list


rbegin rend // operatory wsteczne


cbegin cend crbegin crend // w c++11 const iterator


jednokierunkowa lista nie ma metody size()
bo z założenia ma być bardzo upakowana


resize
front back //pozwalają na dostęp przez referencję do pierwszego albo ostatniego elementu


assign

emplace // możemy stworzyć obiekt w miejscu, nie podajemy obiektu tylko argumenty konstruktora danego obiektu
insert // musimy podać obiekt
erase // musimy podać iterator do miejsca z którego obiekt chcemy usunąć

swap // możemy zamienić dwa elementy z d

resize // inicjalizuje obiekt domyślnie jeśli zwiększa rozmiar kontenera
// jeśli obiekt nie ma domyślnego konstruktora to się nie skompiluje resize

clear // usuwa elementy kontenera wywołuje destruktory

--------------------------------------------------------------

Architektura komputerów prog Biernat


std::array<>

array ma stały rozmiar
jest definiowany na poziomie parametru szablonowego, nie można go zmieniać później

jeśli zrobimy new array to będzie cały array zaalokowany na stercie
ale domyślnie alokowany na stosie
w pamięci podręcznej  dzięki czemu może szybciej je wykonywać
w cacheu na
jeśli ładujemy element z arrayu to kolejne elemnty też będą załadowane do cachu
bo jest ciągłość pamięci
contiguous storage on stack
funkcja data()
służy do pobrania wskaźnika na pierwszy element tablicy.
ale nie powinniśmy zwalniać tego wskaźnika
to byłoby undefined behaviour

random acces O(1)

fixed-size aggregate
stały rozmiar tej tablicy nie ma resize()
wszystkie elementy się tworzą od razu


std::array może być traktowany jako std::tuple czyli krotka
czyli nienazwana struktura
możemy się dostać po indeksach
pure data no hidden fields
cache-friendly
Nie ma żadnych dodatkowych pól

.at(x) rzuca wyjątkiem jeśli wyjdziemy poza zakres array

dla array zawsze size i max_size zwróci tę samą wartość

przy słapie elementy muszą być tego samego typu
w przypadku typu array
to będą także ten sam rozmiar tablic

------------------------------------------


std::vector

dynamicznie alokowany stały blok pamięci na stercie (heap)
cache-friendly
amortyzowany czas wstawiania elementu na koniec wektora

reserve()
capacity // zaalokowana pamięć (ile elementów może zostać wstawione przy obecnie zaalokowanej pamięci)
max_size // ile pamięci może zostać potencjalnie zaalokowane (ile elementów może zostać wstawione do całej dostępnej pamięci)

emplace_back vs push_back
emplace jeśli nie mamy jeszcze elementu
push_back jeśli element już istnieje



-------------------------------

std::vector<bool>

specjalizacja zoptymalizowania
jest pośredni dostęp do elementów poprzez elementy proxy
ponieważ nie można zwrócić referencji do bitu

----------------------------------------------------------

deque
deque jest nieco wolniejszy od vectora
jest trochę trudniejszy

odwołanie do jednej tablicy
a potem odwołanie do drugiej tablicy
w której znajduje się obiekt

non-continuous storage

-------------------------------------------------------------

std::list
splice // przenosi elementy z jednej listy do drugiej listy
unique // usuwa duplikaty na liście

------------------------------------------------------------------

forward_list

wydajna pamięciowo
nie ma pola size

---------------------------------------------

kontenery asocjacyjne
Associative containers

set zwykły zbiór
konstrukcja jest w postaci drzewa z kluczem

set
multiset
map
multimap

unordered containers

-----------------------------------------

czas wstawiania w drzewo
O(logN)


support bidirectional iterators
klucze są const nie można ich zmieniać

implementowane za pomocą drzez binarnego przeszukiwania
drzewo czerwono czarne


emplace_hint() możemy podać iterator który jest zbliżony do elementu gdzie chcemy wstawić
wtedy operacja wstawienia może być szybsza



find() zwraca iterator podanego elementu

equal_range() podaje nam parę iteratorów początek i koniec
lower_bound() // iterator na pierwszy element który pasuje (jest większy niż klucz)
upper_bound() // iterator na element za elementem który jest nie mniejszy niż klucz

key_comp() // komparator do klucza
value_comp() // komparator do typów wartości???

mapa to inaczej słownik w pythonie

mapa ma w sobie kilka elementów

at() // zwróci element const ewentualnie rzuci wyjątek jeśli go nie było
operator[] // zwróci element jeśli nie ma elementu to go stworzy


